{
    "meta": {
        "dse_version": "5.0",
        "aggregates": {
            "max": "<b>Max</b> - The maximum value recorded during a time interval. A higher maximum value could have occurred without it being recorded.",
            "average": "<b>Avg</b> - The average of values recorded during a time interval.",
            "total": "<b>Total</b> - Sum of the values recorded for each node during a time interval.",
            "min": "<b>Min</b> - The minimal value recorded during a time interval. A lower minimal value could have occurred without it being recorded."
        },
        "include": ["cassandra-metrics-2.1.9.791.json"],
        "exclude": [
            "write-latency-op", "read-latency-op", "cf-read-latency-op", "cf-write-latency-op",
            "active-hinted-handoff", "pending-hinted-handoff", "completed-hinted-handoff",
            "active-commitlog-archiver", "pending-commitlog-archiver", "completed-commitlog-archiver"
        ]
    },
    "write-histogram": {
        "aggregation_type": "histogram",
        "allow_alerts": true,
        "api_key": "write-histogram",
        "description": "The min, median, max, 90th, and 99th percentiles of a client writes. The time period starts when a node receives a client write request, and ends when the node responds back to the client. Depending on consistency level and replication factor, this may include the network latency from writing to the replicas.",
        "group": "cassandra",
        "histogram": true,
        "label": "Write Request Latency (percentiles)",
        "label_func": "logLabel",
        "max": "<b>Max</b> - The maximum latency during a time interval.",
        "mbean": "org.apache.cassandra.metrics:type=ClientRequest,scope=Write,name=Latency",
        "invoke": ["values"],
        "median": "<b>Median</b> - The median, also known as the 50th percentile, represents a value where 50 percent of values during a time interval are either at or below the median value.",
        "metric_type": "histogram",
        "min": "<b>Min</b> - The minimum latency during a time interval.",
        "p90th": "<b>90th</b> - The 90th percentile represents a value where 90 percent of values during a time interval are at or below, and 10 percent of values are above, the 90th percentile value.",
        "p99th": "<b>99th</b> - The 99th percentile represents a value where 99 percent of values during a time interval are at or below, and 1 percent of values are above, the 99th percentile value.",
        "plot": "Areas",
        "priority": 0,
        "scale": "logScale",
        "scope": "general",
        "storage_name": "getWriteLatencyHisto",
        "to_unit": "nsToMs",
        "from_unit": "msToNs",
        "type": "jmx",
        "unit": "ms/op"
    },
    "read-histogram": {
        "aggregation_type": "histogram",
        "allow_alerts": true,
        "api_key": "read-histogram",
        "description": "The min, median, max, 90th, and 99th percentiles of a client reads. The time period starts when a node receives a client read request, and ends when the node responds back to the client. Depending on consistency level and replication factor, this may include the network latency from requesting the data\u2019s replicas.",
        "group": "cassandra",
        "histogram": true,
        "label": "Read Request Latency (percentiles)",
        "label_func": "logLabel",
        "max": "<b>Max</b> - The maximum latency during a time interval.",
        "mbean": "org.apache.cassandra.metrics:type=ClientRequest,scope=Read,name=Latency",
        "invoke": ["values"],
        "median": "<b>Median</b> - The median, also known as the 50th percentile, represents a value where 50 percent of values during a time interval are either at or below the median value.",
        "metric_type": "histogram",
        "min": "<b>Min</b> - The minimum latency during a time interval.",
        "p90th": "<b>90th</b> - The 90th percentile represents a value where 90 percent of values during a time interval are at or below, and 10 percent of values are above, the 90th percentile value.",
        "p99th": "<b>99th</b> - The 99th percentile represents a value where 99 percent of values during a time interval are at or below, and 1 percent of values are above, the 99th percentile value.",
        "plot": "Areas",
        "priority": 1,
        "scale": "logScale",
        "scope": "general",
        "storage_name": "getReadLatencyHisto",
        "to_unit": "nsToMs",
        "from_unit": "msToNs",
        "type": "jmx",
        "unit": "ms/op"
    },
    "write-latency-legacy": {
        "aggregation_type": "histogram-avg",
        "allow_alerts": false,
        "api_key": "write-latency-legacy",
        "description": "<b>Deprecated</b>. The <i>median</i> response times (in milliseconds) of a client write. The time period starts when a node receives a client write request, and ends when the node responds back to the client. Depending on consistency level and replication factor, this may include the network latency from writing to the replicas.",
        "label": "Write Request Latency",
        "min": "<b>Min</b> - The minimum latency during a time interval.",
        "average": "<b>Avg</b> - The <i>median</i> of values a time interval.",
        "max": "<b>Max</b> - The maximum latency during a time interval.",
        "minstep": 0.1,
        "priority": 2,
        "wraps_histogram": "write-histogram",
        "to_unit": "nsToMs",
        "from_unit": "msToNs",
        "unit": "ms/op",
        "selectable": false
    },
    "read-latency-legacy": {
        "aggregation_type": "histogram-avg",
        "allow_alerts": false,
        "api_key": "read-latency-legacy",
        "description": "<b>Deprecated</b>. The <i>median</i> response times (in milliseconds) of a client read. The time period starts when a node receives a client read request, and ends when the node responds back to the client. Depending on consistency level and replication factor, this may include the network latency from requesting the data's replicas.",
        "label": "Read Request Latency",
        "min": "<b>Min</b> - The minimum latency during a time interval.",
        "average": "<b>Avg</b> - The <i>median</i> of values a time interval.",
        "max": "<b>Max</b> - The maximum latency during a time interval.",
        "minstep": 0.1,
        "priority": 3,
        "wraps_histogram": "read-histogram",
        "to_unit": "nsToMs",
        "from_unit": "msToNs",
        "unit": "ms/op",
        "selectable": false
    },
    "view-write-histogram": {
        "aggregation_type": "histogram",
        "allow_alerts": true,
        "api_key": "view-write-histogram",
        "description": "The min, median, max, 90th, and 99th percentiles of the time from when base mutation is applied to memtable until CL.ONE is achieved on the async write to the tables materialized views. An estimate to determine the lag between base table mutations and the views consistency.",
        "group": "cassandra",
        "histogram": true,
        "label": "View Write Latency (percentiles)",
        "label_func": "logLabel",
        "max": "<b>Max</b> - The maximum latency during a time interval.",
        "mbean": "org.apache.cassandra.metrics:type=ClientRequest,scope=ViewWrite,name=ViewWriteLatency",
        "invoke": ["values"],
        "median": "<b>Median</b> - The median, also known as the 50th percentile, represents a value where 50 percent of values during a time interval are either at or below the median value.",
        "metric_type": "histogram",
        "min": "<b>Min</b> - The minimum latency during a time interval.",
        "p90th": "<b>90th</b> - The 90th percentile represents a value where 90 percent of values during a time interval are at or below, and 10 percent of values are above, the 90th percentile value.",
        "p99th": "<b>99th</b> - The 99th percentile represents a value where 99 percent of values during a time interval are at or below, and 1 percent of values are above, the 99th percentile value.",
        "plot": "Areas",
        "priority": 5,
        "scale": "logScale",
        "scope": "general",
        "type": "jmx",
        "unit": "ms/op"
    },
    "view-replicas-success": {
        "aggregation_type": "counter",
        "api_key": "view-replicas-success",
        "description": "Number of view mutations sent to replicas that have been acknowledged.",
        "group": "cassandra",
        "label": "View Write Successes",
        "mbean": "org.apache.cassandra.metrics:type=ClientRequest,scope=ViewWrite,name=ViewReplicasSuccess",
        "path": ["Count"],
        "metric_type": "gauge",
        "priority": 6,
        "scope": "general",
        "type": "jmx",
        "unit": "mutations"
    },
    "view-replicas-pending": {
        "aggregation_type": "counter",
        "api_key": "view-replicas-pending",
        "description": "Number of view mutations sent to replicas where the replicas acknowledgement hasn't been received.",
        "group": "cassandra",
        "label": "View Write Pending",
        "mbean": "org.apache.cassandra.metrics:type=ClientRequest,scope=ViewWrite,name=ViewPendingMutations",
        "path": ["Value"],
        "metric_type": "gauge",
        "priority": 6,
        "scope": "general",
        "type": "jmx",
        "unit": "mutations"
    },
    "data-load": {
        "aggregation_type": "counter",
        "api_key": "data-load",
        "description": "The live disk space used by all tables on a node.",
        "from_unit": "gbToBytes",
        "group": "cassandra",
        "label": "Data Size",
        "mbean": "org.apache.cassandra.metrics:type=Storage,name=Load",
        "metric_type": "gauge",
        "path": ["Count"],
        "priority": 20,
        "scope": "general",
        "storage_name": "getDataLoad",
        "to_unit": "bytesToGb",
        "type": "jmx",
        "render_type": "filesize"
    },
    "key-cache-hit-rate": {
        "aggregation_type": "average",
        "api_key": "key-cache-hit-rate",
        "description": "The percentage of key cache lookups that resulted in a hit. This metric only applies to SSTables created by DSE versions earlier than 6.0.",
        "from_unit": "fromPercentage",
        "group": "cassandra",
        "label": "KeyCache Hit Rate",
        "mbean": "org.apache.cassandra.metrics:type=Cache,scope=KeyCache,name=OneMinuteHitRate",
        "metric_type": "gauge",
        "path": ["Value"],
        "priority": 35,
        "scope": "general",
        "storage_name": "getKeyCacheRecentHitRate",
        "to_unit": "toPercentage",
        "type": "jmx",
        "render_type": "percentage"
    },
    "row-cache-hit-rate": {
        "aggregation_type": "average",
        "api_key": "row-cache-hit-rate",
        "description": "The percentage of row cache lookups that resulted in a hit.",
        "from_unit": "fromPercentage",
        "group": "cassandra",
        "label": "RowCache Hit Rate",
        "mbean": "org.apache.cassandra.metrics:type=Cache,scope=RowCache,name=OneMinuteHitRate",
        "metric_type": "gauge",
        "path": ["Value"],
        "priority": 35,
        "scope": "general",
        "storage_name": "getRowCacheRecentHitRate",
        "to_unit": "toPercentage",
        "type": "jmx",
        "render_type": "percentage"
    },

    "all-pending": {
        "api_key": "all-pending",
        "description": "Aggregate of thread pools pending queues that can be used to identify where things are backing up internally. This doesn't include pending compactions because it includes an estimate outside of the task queue or the hinted hand off queue, which can be in constant state of being on.",
        "group": "cassandra",
        "label": "Task Queues",
        "metrics": [
            "pending-anti-entropy-stage",
            "pending-cache-cleanup-stage",
            "pending-compaction-executor",
            "pending-counter-mutations",
            "pending-flushes",
            "pending-gossip-stage",
            "pending-hint-dispatcher",
            "pending-internal-response-stage",
            "pending-memtable-post-flush",
            "pending-migration-stage",
            "pending-misc-stage",
            "pending-mutation-stage",
            "pending-native-transport-requests",
            "pending-pending-range-calculator",
            "pending-read-repair-stage",
            "pending-read-stage",
            "pending-request-response-stage",
            "pending-secondary-index-management",
            "pending-validation-executor",
            "pending-view-mutation-stage"
        ],
        "plot": "StackedAreas",
        "priority": 25,
        "unit": "tasks"
    },
    "pending-view-mutation-stage": {
        "aggregation_type": "counter",
        "api_key": "pending-view-mutation-stage",
        "description": "Number of mutations to apply locally after modifications to a base table.",
        "group": "cassandra",
        "label": "TP: View Mutations Pending",
        "mbean": "org.apache.cassandra.metrics:type=ThreadPools,path=request,scope=ViewMutationStage,name=PendingTasks",
        "metric_type": "gauge",
        "path": ["Value"],
        "priority": 30,
        "scope": "general",
        "type": "jmx"
    },
    "active-view-mutation-stage": {
        "aggregation_type": "counter",
        "api_key": "active-view-mutation-stage",
        "description": "Number of mutations to being applied locally after modifications to a base table.",
        "group": "cassandra",
        "label": "TP: View Mutations Active",
        "mbean": "org.apache.cassandra.metrics:type=ThreadPools,path=request,scope=ViewMutationStage,name=ActiveTasks",
        "metric_type": "gauge",
        "path": ["Value"],
        "priority": 30,
        "scope": "general",
        "type": "jmx"
    },
    "completed-view-mutation-stage": {
        "aggregation_type": "counter",
        "api_key": "completed-view-mutation-stage",
        "description": "Number of mutations applied locally after modifications to a base table.",
        "group": "cassandra",
        "label": "TP: View Mutations Completed",
        "mbean": "org.apache.cassandra.metrics:type=ThreadPools,path=request,scope=ViewMutationStage,name=CompletedTasks",
        "metric_type": "gauge",
        "path": ["Value"],
        "priority": 30,
        "scope": "general",
        "type": "jmx"
    },
    "pending-hint-dispatcher": {
        "aggregation_type": "counter",
        "api_key": "pending-hint-dispatcher",
        "description": "Pending tasks to send the stored hinted handoffs to a host.",
        "group": "cassandra",
        "label": "TP: Hint Dispatcher Pending",
        "mbean": "org.apache.cassandra.metrics:type=ThreadPools,path=internal,scope=HintsDispatcher,name=PendingTasks",
        "metric_type": "gauge",
        "path": ["Value"],
        "priority": 30,
        "scope": "general",
        "type": "jmx"
    },
    "active-hint-dispatcher": {
        "aggregation_type": "counter",
        "api_key": "active-hint-dispatcher",
        "description": "Up to max_hints_delivery_threads tasks, each dispatching all hinted handoffs to a host.",
        "group": "cassandra",
        "label": "TP: Hint Dispatcher Active",
        "mbean": "org.apache.cassandra.metrics:type=ThreadPools,path=internal,scope=HintsDispatcher,name=ActiveTasks",
        "metric_type": "gauge",
        "path": ["Value"],
        "priority": 30,
        "scope": "general",
        "type": "jmx"
    },
    "completed-hint-dispatcher": {
        "aggregation_type": "counter",
        "api_key": "completed-hint-dispatchers",
        "description": "Number of tasks to transfer hints to a host that have completed.",
        "group": "cassandra",
        "label": "TP: Hint Dispatcher Completed",
        "mbean": "org.apache.cassandra.metrics:type=ThreadPools,path=internal,scope=HintsDispatcher,name=CompletedTasks",
        "metric_type": "gauge",
        "path": ["Value"],
        "priority": 30,
        "scope": "general",
        "type": "jmx"
    },
    "pending-secondary-index-management": {
        "aggregation_type": "counter",
        "api_key": "pending-index-management",
        "description": "Any initialization work when a new index instance is created. This may involve costly operations such as (re)building the index.",
        "group": "cassandra",
        "label": "TP: Index Management Pending",
        "mbean": "org.apache.cassandra.metrics:type=ThreadPools,path=internal,scope=SecondaryIndexManagement,name=PendingTasks",
        "metric_type": "gauge",
        "path": ["Value"],
        "priority": 30,
        "scope": "general",
        "type": "jmx"
    },
    "active-secondary-index-management": {
        "aggregation_type": "counter",
        "api_key": "active-index-management",
        "description": "Any initialization work when a new index instance is created. This may involve costly operations such as (re)building the index.",
        "group": "cassandra",
        "label": "TP: Index Management Active",
        "mbean": "org.apache.cassandra.metrics:type=ThreadPools,path=internal,scope=SecondaryIndexManagement,name=ActiveTasks",
        "metric_type": "gauge",
        "path": ["Value"],
        "priority": 30,
        "scope": "general",
        "type": "jmx"
    },
    "completed-secondary-index-management": {
        "aggregation_type": "counter",
        "api_key": "completed-index-management",
        "description": "Any initialization work when a new index instance is created. This may involve costly operations such as (re)building the index.",
        "group": "cassandra",
        "label": "TP: Index Management Completed",
        "mbean": "org.apache.cassandra.metrics:type=ThreadPools,path=internal,scope=SecondaryIndexManagement,name=CompletedTasks",
        "metric_type": "gauge",
        "path": ["Value"],
        "priority": 30,
        "scope": "general",
        "type": "jmx"
    },
    "blocked-native-transport-requests": {
        "aggregation_type": "counter",
        "api_key": "blocked-native-transport-requests",
        "description": "Native Transport Requests Requests Blocked",
        "group": "cassandra",
        "label": "TP: Native Transport Requests Blocked",
        "mbean": "org.apache.cassandra.metrics:type=ThreadPools,path=transport,scope=Native-Transport-Requests,name=CurrentlyBlockedTasks",
        "metric_type": "gauge",
        "path": ["Count"],
        "priority": 30,
        "scope": "general",
        "storage_name": "getNativeTransportRequestsBlocked",
        "type": "jmx"
    },
    "total-blocked-native-transport-requests": {
        "aggregation_type": "counter",
        "api_key": "total-blocked-native-transport-requests",
        "description": "Total Native Transport Requests Requests Blocked",
        "group": "cassandra",
        "label": "TP: Total Native Transport Requests Blocked",
        "mbean": "org.apache.cassandra.metrics:type=ThreadPools,path=transport,scope=Native-Transport-Requests,name=TotalBlockedTasks",
        "metric_type": "gauge",
        "path": ["Count"],
        "priority": 30,
        "scope": "general",
        "storage_name": "getNativeTransportRequestsTotalBlocked",
        "type": "jmx"
    },
    "cf-tombstones-per-read": {
        "aggregation_type": "histogram",
        "allow_alerts": true,
        "api_key": "cf-tombstones-per-read",
        "is_table_metric": true,
        "description": "The min, median, max, 90th, and 99th percentile of how many tombstones are read during a read.",
        "group": "cf",
        "histogram": true,
        "label": "TBL: Tombstones per Read (percentiles)",
        "max": "<b>Max</b> - Maximum number of tombstones accessed during this period for a single read on this table.",
        "mbean": "org.apache.cassandra.metrics:type=Table,keyspace={keyspace},scope={table},name=TombstoneScannedHistogram",
        "median": "<b>Median</b> - 50 percent of reads accessed no more than this many tombstones during the period.",
        "metric_type": "histogram",
        "min": "<b>Min</b> - Minimum number of tombstones accessed during this period for a single read on this table.",
        "p90th": "<b>90th</b> - 90 percent of reads accessed no more than this many tombstones during the period.",
        "p99th": "<b>99th</b> - 99 percent of reads accessed no more than this many tombstones during the period.",
        "invoke": ["values"],
        "plot": "Areas",
        "scope": "cf",
        "type": "jmx",
        "unit": "tombstones"
    },
    "cf-sstables-per-read": {
        "aggregation_type": "histogram",
        "allow_alerts": true,
        "api_key": "cf-sstables-per-read",
        "is_table_metric": true,
        "description": "The min, median, max, 90th, and 99th percentile of how many SSTables are accessed during a read. Includes sstables that undergo bloom-filter checks, even if no data is read from the sstable.",
        "group": "cf",
        "histogram": true,
        "label": "TBL: SSTables per Read (percentiles)",
        "max": "<b>Max</b> - Maximum number of SSTables checked or read during this period for a single read on this table.",
        "mbean": "org.apache.cassandra.metrics:type=Table,keyspace={keyspace},scope={table},name=SSTablesPerReadHistogram",
        "median": "<b>Median</b> - 50 percent of reads checked or read no more than this many SSTables during the period.",
        "metric_type": "histogram",
        "min": "<b>Min</b> - Minimum number of SSTables checked or read during this period for a single read on this table.",
        "p90th": "<b>90th</b> - 90 percent of reads checked or read no more than this many SSTables during the period.",
        "p99th": "<b>99th</b> - 99 percent of reads checked or read no more than this many SSTables during the period.",
        "invoke": ["values"],
        "plot": "Areas",
        "scope": "cf",
        "type": "jmx",
        "unit": "sstables"
    },
    "cf-memtable-offheap": {
        "aggregation_type": "average",
        "alerts_label": "Memtable Off Heap",
        "api_key": "cf-memtable-offheap",
        "is_table_metric": true,
        "description": "Off heap memory used by a table's current memtable.",
        "from_unit": "gbToBytes",
        "group": "cf",
        "label": "TBL: Memtable Off Heap",
        "mbean": "org.apache.cassandra.metrics:type=Table,keyspace={keyspace},scope={table},name=MemtableOffHeapSize",
        "metric_type": "gauge",
        "path": ["Value"],
        "scope": "cf",
        "to_unit": "bytesToGb",
        "type": "jmx",
        "render_type": "filesize"
    },
    "cf-all-memtables-heapsize": {
        "aggregation_type": "counter",
        "alerts_label": "Total Memtable Heap Size",
        "api_key": "cf-all-memtables-heapsize",
        "is_table_metric": true,
        "description": "An estimate of the space used in JVM heap memory for all memtables. This includes ones that are currently being flushed and related secondary indexes.",
        "from_unit": "gbToBytes",
        "group": "cf",
        "label": "TBL: Total Memtable Heap Size",
        "mbean": "org.apache.cassandra.metrics:type=Table,keyspace={keyspace},scope={table},name=AllMemtablesHeapSize",
        "metric_type": "gauge",
        "path": ["Value"],
        "scope": "cf",
        "to_unit": "bytesToGb",
        "type": "jmx",
        "render_type": "filesize"
    },
    "cf-all-memtables-livedatasize": {
        "aggregation_type": "counter",
        "alerts_label": "Total Memtable Live Data Size",
        "api_key": "cf-all-memtables-livedatasize",
        "is_table_metric": true,
        "description": "An estimate of the space used for 'live data' (off-heap, excluding overhead) for all memtables. This includes ones that are currently being flushed and related secondary indexes.",
        "from_unit": "gbToBytes",
        "group": "cf",
        "label": "TBL: Total Memtable Live Data Size",
        "mbean": "org.apache.cassandra.metrics:type=Table,keyspace={keyspace},scope={table},name=AllMemtablesLiveDataSize",
        "metric_type": "gauge",
        "path": ["Value"],
        "scope": "cf",
        "to_unit": "bytesToGb",
        "type": "jmx",
        "render_type": "filesize"
    },
    "cf-all-memtables-offheapsize": {
        "aggregation_type": "counter",
        "alerts_label": "Total Memtable Off-Heap Size",
        "api_key": "cf-all-memtables-offheapsize",
        "is_table_metric": true,
        "description": "An estimate of the space used in off-heap memory for all memtables. This includes ones that are currently being flushed and related secondary indexes.",
        "from_unit": "gbToBytes",
        "group": "cf",
        "label": "TBL: Total Memtable Off-Heap Size",
        "mbean": "org.apache.cassandra.metrics:type=Table,keyspace={keyspace},scope={table},name=AllMemtablesOffHeapSize",
        "metric_type": "gauge",
        "path": ["Value"],
        "scope": "cf",
        "to_unit": "bytesToGb",
        "type": "jmx",
        "render_type": "filesize"
    },
    "cf-bf-offheap": {
        "aggregation_type": "average",
        "alerts_label": "Bloom Filter Off Heap",
        "api_key": "cf-bf-offheap",
        "is_table_metric": true,
        "description": "Total off heap memory used by bloom filters from all live SSTables in a table.",
        "from_unit": "gbToBytes",
        "group": "cf",
        "label": "TBL: Bloom Filter Off Heap",
        "mbean": "org.apache.cassandra.metrics:type=Table,keyspace={keyspace},scope={table},name=BloomFilterOffHeapMemoryUsed",
        "metric_type": "gauge",
        "path": ["Value"],
        "scope": "cf",
        "to_unit": "bytesToGb",
        "type": "jmx",
        "render_type": "filesize"
    },
    "cf-index-summary-offheap": {
        "aggregation_type": "average",
        "alerts_label": "Index Summary Off Heap",
        "api_key": "cf-index-summary-offheap",
        "is_table_metric": true,
        "description": "Total off heap memory used by the index summary of all live SSTables in a table.",
        "from_unit": "gbToBytes",
        "group": "cf",
        "label": "TBL: Index Summary Off Heap",
        "mbean": "org.apache.cassandra.metrics:type=Table,keyspace={keyspace},scope={table},name=IndexSummaryOffHeapMemoryUsed",
        "metric_type": "gauge",
        "path": ["Value"],
        "scope": "cf",
        "to_unit": "bytesToGb",
        "type": "jmx",
        "render_type": "filesize"
    },
    "cf-compression-data-offheap": {
        "aggregation_type": "average",
        "alerts_label": "Compression Metadata Off Heap",
        "api_key": "cf-compression-data-offheap",
        "is_table_metric": true,
        "description": "Total off heap memory used by the compression metadata of all live SSTables in a table.",
        "from_unit": "gbToBytes",
        "group": "cf",
        "label": "TBL: Compression Metadata Off Heap",
        "mbean": "org.apache.cassandra.metrics:type=Table,keyspace={keyspace},scope={table},name=CompressionMetadataOffHeapMemoryUsed",
        "metric_type": "gauge",
        "path": ["Value"],
        "scope": "cf",
        "to_unit": "bytesToGb",
        "type": "jmx",
        "render_type": "filesize"
    },

    "cf-write-ops": {
        "aggregation_type": "counter",
        "alerts_label": "Local Writes",
        "api_key": "cf-write-ops",
        "is_table_metric": true,
        "description": "Local write requests per second. Local writes update the table's memtable and appends to a commitlog.",
        "group": "cf",
        "label": "TBL: Local Writes",
        "mbean": "org.apache.cassandra.metrics:type=Table,keyspace={keyspace},scope={table},name=WriteLatency",
        "metric_type": "derive",
        "path": ["Count"],
        "scope": "cf",
        "storage_name": "getWriteCount",
        "type": "jmx",
        "unit": "/sec"
    },
    "cf-write-latency-legacy": {
        "aggregation_type": "histogram-avg",
        "allow_alerts": false,
        "api_key": "cf-write-latency-legacy",
        "is_table_metric": true,
        "description": "<b>Deprecated</b>. Median response time to write data to a table's memtable. The elapsed time from when the replica receives the request from a coordinator and returns a response.",
        "group": "cf",
        "label": "TBL: Local Write Latency",
        "min": "<b>Min</b> - The minimum latency during a time interval.",
        "average": "<b>Avg</b> - The <i>median</i> of values a time interval.",
        "max": "<b>Max</b> - The maximum latency during a time interval.",
        "minstep": 0.1,
        "scope": "cf",
        "wraps_histogram": "cf-local-write-latency",
        "to_unit": "nsToMs",
        "from_unit": "msToNs",
        "unit": "ms/op",
        "selectable": false
    },
    "cf-local-write-latency": {
        "aggregation_type": "histogram",
        "allow_alerts": true,
        "api_key": "cf-local-write-latency",
        "is_table_metric": true,
        "description": "The min, median, max, 90th, and 99th percentile of the response times to write data to a table's memtable. The elapsed time from when the replica receives the request from a coordinator and returns a response.",
        "group": "cf",
        "histogram": true,
        "label": "TBL: Local Write Latency (percentiles)",
        "label_func": "logLabel",
        "max": "<b>Max</b> - The maximum latency during a time interval.",
        "mbean": "org.apache.cassandra.metrics:type=Table,keyspace={keyspace},scope={table},name=WriteLatency",
        "invoke": ["values"],
        "median": "<b>Median</b> - The median, also known as the 50th percentile, represents a value where 50 percent of values during a time interval are either at or below the median value.",
        "metric_type": "histogram",
        "min": "<b>Min</b> - The minimum latency during a time interval.",
        "p90th": "<b>90th</b> - The 90th percentile represents a value where 90 percent of values during a time interval are at or below, and 10 percent of values are above, the 90th percentile value.",
        "p99th": "<b>99th</b> - The 99th percentile represents a value where 99 percent of values during a time interval are at or below, and 1 percent of values are above, the 99th percentile value.",
        "plot": "Areas",
        "scale": "logScale",
        "scope": "cf",
        "storage_name": "getCFLocalWriteLatency",
        "to_unit": "nsToMs",
        "from_unit": "msToNs",
        "type": "jmx",
        "unit": "ms/op"
    },
    "cf-read-ops": {
        "aggregation_type": "counter",
        "alerts_label": "Local Reads",
        "api_key": "cf-read-ops",
        "is_table_metric": true,
        "description": "Local read requests per second. Local reads retrieve data from a table's memtable and any necessary SSTables on disk.",
        "group": "cf",
        "label": "TBL: Local Reads",
        "mbean": "org.apache.cassandra.metrics:type=Table,keyspace={keyspace},scope={table},name=ReadLatency",
        "metric_type": "derive",
        "path": ["Count"],
        "scope": "cf",
        "storage_name": "getReadCount",
        "type": "jmx",
        "unit": "/sec"
    },
    "cf-read-latency-legacy": {
        "aggregation_type": "histogram-avg",
        "allow_alerts": false,
        "api_key": "cf-read-latency-legacy",
        "is_table_metric": true,
        "description": "<b>Deprecated</b>. Median response time to read data from the memtable and SSTables for a specific table. The elapsed time from when the replica receives the request from a coordinator and returns a response.",
        "group": "cf",
        "label": "TBL: Local Read Latency",
        "min": "<b>Min</b> - The minimum latency during a time interval.",
        "average": "<b>Avg</b> - The <i>median</i> of values a time interval.",
        "max": "<b>Max</b> - The maximum latency during a time interval.",
        "minstep": 0.1,
        "scope": "cf",
        "wraps_histogram": "cf-local-read-latency",
        "to_unit": "nsToMs",
        "from_unit": "msToNs",
        "unit": "ms/op",
        "selectable": false
    },
    "cf-local-read-latency": {
        "aggregation_type": "histogram",
        "allow_alerts": true,
        "api_key": "cf-local-read-latency",
        "is_table_metric": true,
        "description": "The min, median, max, 90th, and 99th percentile of the response time to read data from the memtable and sstables for a specific table. The elapsed time from when the replica receives the request from a coordinator and returns a response.",
        "group": "cf",
        "histogram": true,
        "label": "TBL: Local Read Latency (percentiles)",
        "label_func": "logLabel",
        "max": "<b>Max</b> - The maximum latency during a time interval.",
        "mbean": "org.apache.cassandra.metrics:type=Table,keyspace={keyspace},scope={table},name=ReadLatency",
        "invoke": ["values"],
        "median": "<b>Median</b> - The median, also known as the 50th percentile, represents a value where 50 percent of values during a time interval are either at or below the median value.",
        "metric_type": "histogram",
        "min": "<b>Min</b> - The minimum latency during a time interval.",
        "p90th": "<b>90th</b> - The 90th percentile represents a value where 90 percent of values during a time interval are at or below, and 10 percent of values are above, the 90th percentile value.",
        "p99th": "<b>99th</b> - The 99th percentile represents a value where 99 percent of values during a time interval are at or below, and 1 percent of values are above, the 99th percentile value.",
        "plot": "Areas",
        "scale": "logScale",
        "scope": "cf",
        "storage_name": "getCFLocalReadLatency",
        "to_unit": "nsToMs",
        "from_unit": "msToNs",
        "type": "jmx",
        "unit": "ms/op"
    },
    "cf-coordinator-read-latency": {
        "aggregation_type": "histogram",
        "allow_alerts": true,
        "api_key": "cf-coordinator-read-latency",
        "is_table_metric": true,
        "description": "The min, median, max, 90th, and 99th percentiles of client reads on this table. The time period starts when a node receives a client read request, and ends when the node responds back to the client. Depending on consistency level and replication factor, this may include the network latency from requesting the data's replicas.",
        "group": "cf",
        "histogram": true,
        "label": "TBL: Coordinator Read Latency (percentiles)",
        "label_func": "logLabel",
        "max": "<b>Max</b> - The maximum latency during a time interval.",
        "mbean": "org.apache.cassandra.metrics:type=Table,keyspace={keyspace},scope={table},name=CoordinatorReadLatency",
        "invoke": ["values"],
        "median": "<b>Median</b> - The median, also known as the 50th percentile, represents a value where 50 percent of values during a time interval are either at or below the median value.",
        "metric_type": "histogram",
        "min": "<b>Min</b> - The minimum latency during a time interval.",
        "p90th": "<b>90th</b> - The 90th percentile represents a value where 90 percent of values during a time interval are at or below, and 10 percent of values are above, the 90th percentile value.",
        "p99th": "<b>99th</b> - The 99th percentile represents a value where 99 percent of values during a time interval are at or below, and 1 percent of values are above, the 99th percentile value.",
        "plot": "Areas",
        "scale": "logScale",
        "scope": "cf",
        "to_unit": "nsToMs",
        "from_unit": "msToNs",
        "type": "jmx",
        "unit": "ms/op"
    },
    "cf-coordinator-read-ops": {
        "aggregation_type": "counter",
        "alerts_label" : "Coordinator Read Requests",
        "api_key": "cf-coordinator-read-ops",
        "is_table_metric": true,
        "description": "The number of read requests per second for a particular table on the coordinator nodes. Monitoring the number of requests over a given time period reveals table read workload and usage patterns.",
        "group": "cf",
        "label": "TBL: Coordinator Read Requests",
        "mbean": "org.apache.cassandra.metrics:type=Table,keyspace={keyspace},scope={table},name=CoordinatorReadLatency",
        "metric_type": "derive",
        "path": ["Count"],
        "priority": 1,
        "scope": "cf",
        "type": "jmx",
        "unit": "/sec"
    },
    "cf-live-disk-used": {
        "aggregation_type": "counter",
        "alerts_label": "Live Disk Used",
        "api_key": "cf-live-disk-used",
        "is_table_metric": true,
        "description": "Disk space used by live SSTables. There might be obsolete SSTables not included.",
        "from_unit": "gbToBytes",
        "group": "cf",
        "label": "TBL: Live Disk Used",
        "mbean": "org.apache.cassandra.metrics:type=Table,keyspace={keyspace},scope={table},name=LiveDiskSpaceUsed",
        "metric_type": "gauge",
        "path": ["Count"],
        "postprocess": ["neg-to-nil"],
        "scope": "cf",
        "storage_name": "getLiveDiskSpaceUsed",
        "to_unit": "bytesToGb",
        "type": "jmx",
        "render_type": "filesize"
    },
    "cf-total-disk-used": {
        "aggregation_type": "counter",
        "alerts_label": "Total Disk Used",
        "api_key": "cf-total-disk-used",
        "is_table_metric": true,
        "description": "Disk space used by a table by SSTables, including obsolete ones waiting to be garbage collected.",
        "from_unit": "gbToBytes",
        "group": "cf",
        "label": "TBL: Total Disk Used",
        "mbean": "org.apache.cassandra.metrics:type=Table,keyspace={keyspace},scope={table},name=TotalDiskSpaceUsed",
        "metric_type": "gauge",
        "path": ["Count"],
        "postprocess": ["neg-to-nil"],
        "scope": "cf",
        "storage_name": "getTotalDiskSpaceUsed",
        "to_unit": "bytesToGb",
        "type": "jmx",
        "render_type": "filesize"
    },
    "cf-live-sstables": {
        "aggregation_type": "counter",
        "alerts_label": "SSTable Count",
        "api_key": "cf-live-sstables",
        "is_table_metric": true,
        "description": "Total number of SSTables for a table.",
        "group": "cf",
        "label": "TBL: SSTable Count",
        "mbean": "org.apache.cassandra.metrics:type=Table,keyspace={keyspace},scope={table},name=LiveSSTableCount",
        "metric_type": "gauge",
        "path": ["Value"],
        "scope": "cf",
        "storage_name": "getLiveSSTableCount",
        "type": "jmx"
    },
    "cf-partition-size": {
        "aggregation_type": "histogram",
        "allow_alerts": true,
        "api_key": "cf-partition-size",
        "is_table_metric": true,
        "description": "The min, median, max, 90th, and 99th percentile of the size (in bytes) of partitions of this table.",
        "group": "cf",
        "histogram": true,
        "label": "TBL: Partition Size (percentiles)",
        "label_func": "logLabel",
        "max": "<b>Max</b> - Maximum size of a partition in bytes.",
        "mbean": "org.apache.cassandra.metrics:type=Table,keyspace={keyspace},scope={table},name=EstimatedPartitionSizeHistogram",
        "path": ["Value"],
        "median": "<b>Median</b> - 50 percent of partitions are no larger than this.",
        "metric_type": "histogram-gauge",
        "min": "<b>Min</b> - Minimum size of a partition in bytes",
        "p90th": "<b>90th</b> - 90 percent of partitions are no larger than this.",
        "p99th": "<b>99th</b> - 99 percent of partitions are no larger than this.",
        "plot": "Areas",
        "scale": "logScale",
        "scope": "cf",
        "type": "jmx",
        "render_type": "var-filesize",
        "unit": ""
    },
    "cf-row-size": {
        "aggregation_type": "average",
        "api_key": "cf-row-size",
        "is_table_metric": true,
        "description": "Approximate number of partitions. This may be off given duplicates in memtables and sstables are both counted and there is a very small error percentage inherited from the HyperLogLog data structure.",
        "group": "cf",
        "label": "TBL: Partition Count",
        "mbean": "org.apache.cassandra.metrics:type=Table,keyspace={keyspace},scope={table},name=EstimatedPartitionCount",
        "path": ["Value"],
        "metric_type": "gauge",
        "scope": "cf",
        "type": "jmx"
    },
    "cf-column-count": {
        "aggregation_type": "histogram",
        "allow_alerts": true,
        "api_key": "cf-column-count",
        "is_table_metric": true,
        "description": "The min, median, max, 90th, and 99th percentile of how many cells exist in partitions for this table.",
        "group": "cf",
        "histogram": true,
        "label": "TBL: Cell Count (percentiles)",
        "max": "<b>Max</b> - Maximum number of cells in a partition.",
        "mbean": "org.apache.cassandra.metrics:type=Table,keyspace={keyspace},scope={table},name=EstimatedColumnCountHistogram",
        "median": "<b>Median</b> - 50 percent of partitions have no more than this many cells.",
        "metric_type": "histogram-gauge",
        "min": "<b>Min</b> - Minimum number of cells in a partition.",
        "p90th": "<b>90th</b> - 90 percent of partitions have no more than this many cells.",
        "p99th": "<b>99th</b> - 99 percent of partitions have no more than this many cells.",
        "path": ["Value"],
        "plot": "Areas",
        "scope": "cf",
        "type": "jmx",
        "unit": "cells"
    },
    "cells-scanned-during-read": {
        "aggregation_type": "histogram",
        "allow_alerts": true,
        "api_key": "cells-scanned-during-read",
        "is_table_metric": false,
        "description": "The min, median, max, 90th, and 99th percentile of how many cells were scanned during a read.",
        "group": "cassandra",
        "histogram": true,
        "label": "Cells Scanned (percentiles)",
        "max": "<b>Max</b> - Maximum number of cells scanned.",
        "mbean": "org.apache.cassandra.metrics:type=Table,name=LiveScannedHistogram",
        "median": "<b>Median</b> - 50 percent of reads have scanned this many cells.",
        "metric_type": "histogram",
        "min": "<b>Min</b> - Minimum number of cells scanned in a read.",
        "p90th": "<b>90th</b> - 90 percent of reads have scanned this many cells.",
        "p99th": "<b>99th</b> - 99 percent of reads have scanned this many cells.",
        "invoke": ["values"],
        "plot": "Areas",
        "scope": "general",
        "type": "jmx",
        "unit": "cells"
    },
    "cf-cells-scanned-during-read": {
        "aggregation_type": "histogram",
        "allow_alerts": true,
        "api_key": "cf-cells-scanned-during-read",
        "is_table_metric": true,
        "description": "The min, median, max, 90th, and 99th percentile of how many cells were scanned during a read.",
        "group": "cf",
        "histogram": true,
        "label": "TBL: Cells Scanned (percentiles)",
        "max": "<b>Max</b> - Maximum number of cells scanned.",
        "mbean": "org.apache.cassandra.metrics:type=Table,keyspace={keyspace},scope={table},name=LiveScannedHistogram",
        "median": "<b>Median</b> - 50 percent of reads have scanned this many cells.",
        "metric_type": "histogram",
        "min": "<b>Min</b> - Minimum number of cells scanned in a read.",
        "p90th": "<b>90th</b> - 90 percent of reads have scanned this many cells.",
        "p99th": "<b>99th</b> - 99 percent of reads have scanned this many cells.",
        "invoke": ["values"],
        "plot": "Areas",
        "scope": "cf",
        "type": "jmx",
        "unit": "cells"
    },
    "cf-bf-space-used": {
        "aggregation_type": "average",
        "alerts_label": "Bloom Filter Space Used",
        "api_key": "cf-bf-space-used",
        "is_table_metric": true,
        "description": "The total size of all the SSTables' bloom filters for this table.",
        "from_unit": "gbToBytes",
        "group": "cf",
        "label": "TBL: Bloom Filter Space Used",
        "mbean": "org.apache.cassandra.metrics:type=Table,keyspace={keyspace},scope={table},name=BloomFilterDiskSpaceUsed",
        "metric_type": "gauge",
        "path": ["Value"],
        "scope": "cf",
        "storage_name": "getBloomFilterSpaceUsed",
        "to_unit": "bytesToGb",
        "type": "jmx",
        "render_type": "filesize"
    },
    "cf-bf-false-positives": {
        "aggregation_type": "average",
        "alerts_label": "Bloom Filter False Positives",
        "api_key": "cf-bf-false-positives",
        "is_table_metric": true,
        "description": "Number of bloom filter false positives per second.",
        "group": "cf",
        "label": "TBL: Bloom Filter False Positives",
        "mbean": "org.apache.cassandra.metrics:type=Table,keyspace={keyspace},scope={table},name=BloomFilterFalsePositives",
        "metric_type": "derive",
        "path": ["Value"],
        "scope": "cf",
        "storage_name": "getBloomFilterFalsePositives",
        "type": "jmx",
        "unit": "/sec"
    },
    "cf-bf-false-ratio": {
        "aggregation_type": "average",
        "alerts_label": "Bloom Filter False Positive Ratio",
        "api_key": "cf-bf-false-ratio",
        "is_table_metric": true,
        "description": "Percentage of bloom filter lookups that resulted in a false positive.",
        "group": "cf",
        "hardmax": 1,
        "label": "TBL: Bloom Filter False Positive Ratio",
        "mbean": "org.apache.cassandra.metrics:type=Table,keyspace={keyspace},scope={table},name=RecentBloomFilterFalseRatio",
        "metric_type": "gauge",
        "minstep": 0.0005,
        "path": ["Value"],
        "precision": 4,
        "scope": "cf",
        "storage_name": "getRecentBloomFilterFalseRatio",
        "type": "jmx"
    },

    "cf-tier-size": {
        "aggregation_type": "counter",
        "api_key": "cf-tier-size",
        "is_table_metric": true,
        "is_tier_metric": true,
        "description": "Disk space used by a table by SSTables for the tier.",
        "group": "tier",
        "label": "TIER: Total Disk Used",
        "metric_type": "gauge",
        "path": ["size"],
        "scope": "tier",
        "from_unit": "gbToBytes",
        "to_unit": "bytesToGb",
        "type": "jmx",
        "render_type": "filesize"
    },
    "cf-tier-sstables": {
        "aggregation_type": "counter",
        "api_key": "cf-tier-sstables",
        "is_table_metric": true,
        "is_tier_metric": true,
        "description": "Number of SSTables in a tier for a table.",
        "group": "tier",
        "label": "TIER: sstables",
        "path": ["sstables"],
        "metric_type": "gauge",
        "scope": "tier",
        "type": "jmx",
        "unit": "sstables"
    },
    "cf-tier-max-data-age": {
        "aggregation_type": "average",
        "allow_alerts": false,
        "api_key": "cf-tier-max-data-age",
        "is_table_metric": true,
        "is_tier_metric": true,
        "description": "Timestamp in local server time that represents an upper bound to the newest piece of data stored in the SSTable. When a new SSTable is flushed, it is set to the time of creation. When an SSTable is created from compaction, it is set to the max of all merged SSTables.",
        "group": "tier",
        "label": "TIER: Max Data Age",
        "path": ["max_data_age"],
        "metric_type": "gauge",
        "scope": "tier",
        "to_unit": "ageDuration",
        "render_type": "duration",
        "type": "jmx"
    },
    "graph-adjacency-cache-hit": {
       "aggregation_type": "average",
       "api_key": "graph-adjacency-cache-hit",
       "is_graph_specific": true,
       "description": "Number of hits against the adjacency cache for this graph.",
       "group": "graph",
       "label": "Graph: Adjacency Cache Hits",
       "mbean": "com.datastax.bdp:type=graph,graph=\"{keyspace}\"",
       "metric_type": "gauge",
       "path": ["adjacency-cache-hit"],
       "scope": "graph",
       "type": "jmx"
    },
    "graph-adjacency-cache-miss": {
       "aggregation_type": "average",
       "api_key": "graph-adjacency-cache-miss",
       "is_graph_specific": true,
       "description": "Number of misses against the adjacency cache for this graph.",
       "group": "graph",
       "label": "Graph: Adjacency Cache Misses",
       "mbean": "com.datastax.bdp:type=graph,graph=\"{keyspace}\"",
       "metric_type": "gauge",
       "path": ["adjacency-cache-miss"],
       "scope": "graph",
       "type": "jmx"
    },
    "graph-index-cache-hit": {
       "aggregation_type": "average",
       "api_key": "graph-index-cache-hit",
       "is_graph_specific": true,
       "description": "Number of hits against the index cache for this graph.",
       "group": "graph",
       "label": "Graph: Index Cache Hits",
       "mbean": "com.datastax.bdp:type=graph,graph=\"{keyspace}\"",
       "metric_type": "gauge",
       "path": ["index-cache-hit"],
       "scope": "graph",
       "type": "jmx"
    },
    "graph-index-cache-miss": {
       "aggregation_type": "average",
       "api_key": "graph-index-cache-miss",
       "is_graph_specific": true,
       "description": "Number of misses against the index cache for this graph.",
       "group": "graph",
       "label": "Graph: Index Cache Misses",
       "mbean": "com.datastax.bdp:type=graph,graph=\"{keyspace}\"",
       "metric_type": "gauge",
       "path": ["index-cache-miss"],
       "scope": "graph",
       "type": "jmx"
    },
    "graph-request-latencies": {
        "aggregation_type": "histogram",
        "api_key": "graph-request-latencies",
        "is_graph_specific": true,
        "description": "The min, median, max, 90th, and 99th percentile of request latencies during the period.",
        "group": "graph",
        "histogram": true,
        "label": "Graph: Request Latencies",
        "label_func": "logLabel",
        "max": "<b>Max</b> - Maximum latency for a request against this graph during the period.",
        "mbean": "com.datastax.bdp:type=graph,graph=\"{keyspace}\",metric=request-latencies",
        "median": "<b>Median</b> - 50 percent of requests against this graph during the period had a shorter latency.",
        "metric_type": "histogram",
        "min": "<b>Min</b> - Minimum latency for a request against this graph during the period.",
        "p90th": "<b>90th</b> - 90 percent of requests against this graph during the period had a shorter latency.",
        "p99th": "<b>99th</b> - 99 percent of requests against this graph during the period had a shorter latency.",
        "path": ["Values"],
        "plot": "Areas",
        "scale": "logScale",
        "scope": "graph",
        "type": "jmx",
        "unit": "ms"
    },
    "pending-graph-query-threads": {
        "aggregation_type": "counter",
        "api_key": "pending-graph-query-threads",
        "is_graph_specific": false,
        "description": "Number of pending tasks in the GraphQueryThreads thread pool.",
        "group": "graph",
        "label": "Graph TP: Graph Query Threads Pending",
        "mbean": "com.datastax.bdp:type=graph,name=GraphQueryThreads",
        "metric_type": "gauge",
        "path": ["Pending"],
        "scope": "general",
        "type": "jmx"
    },
    "active-graph-query-threads": {
        "aggregation_type": "counter",
        "api_key": "active-graph-query-threads",
        "is_graph_specific": false,
        "description": "Number of active tasks in the GraphQueryThreads thread pool.",
        "group": "graph",
        "label": "Graph TP: Graph Query Threads Active",
        "mbean": "com.datastax.bdp:type=graph,name=GraphQueryThreads",
        "metric_type": "gauge",
        "path": ["ActiveCount"],
        "scope": "general",
        "type": "jmx"
    },
    "completed-graph-query-threads": {
        "aggregation_type": "counter",
        "api_key": "completed-graph-query-threads",
        "is_graph_specific": false,
        "description": "Number of tasks completed by the GraphQueryThreads thread pool.",
        "group": "graph",
        "label": "Graph TP: Graph Query Threads Completed",
        "mbean": "com.datastax.bdp:type=graph,name=GraphQueryThreads",
        "metric_type": "gauge",
        "path": ["CompletedTaskCount"],
        "scope": "general",
        "type": "jmx"
    },
    "pending-graph-scheduled-threads": {
        "aggregation_type": "counter",
        "api_key": "pending-graph-scheduled-threads",
        "is_graph_specific": false,
        "description": "Number of pending tasks in the GraphScheduledThreads thread pool.",
        "group": "graph",
        "label": "Graph TP: Graph Scheduled Threads Pending",
        "mbean": "com.datastax.bdp:type=graph,name=GraphScheduledThreads",
        "metric_type": "gauge",
        "path": ["Pending"],
        "scope": "general",
        "type": "jmx"
    },
    "active-graph-scheduled-threads": {
        "aggregation_type": "counter",
        "api_key": "active-graph-scheduled-threads",
        "is_graph_specific": false,
        "description": "Number of active tasks in the GraphScheduledThreads thread pool.",
        "group": "graph",
        "label": "Graph TP: Graph Scheduled Threads Active",
        "mbean": "com.datastax.bdp:type=graph,name=GraphScheduledThreads",
        "metric_type": "gauge",
        "path": ["ActiveCount"],
        "scope": "general",
        "type": "jmx"
    },
    "completed-graph-scheduled-threads": {
        "aggregation_type": "counter",
        "api_key": "completed-graph-scheduled-threads",
        "is_graph_specific": false,
        "description": "Number of tasks completed by the GraphScheduledThreads thread pool.",
        "group": "graph",
        "label": "Graph TP: Graph Scheduled Threads Completed",
        "mbean": "com.datastax.bdp:type=graph,name=GraphScheduledThreads",
        "metric_type": "gauge",
        "path": ["CompletedTaskCount"],
        "scope": "general",
        "type": "jmx"
    },
    "pending-graph-system-threads": {
        "aggregation_type": "counter",
        "api_key": "pending-graph-system-threads",
        "is_graph_specific": false,
        "description": "Number of pending tasks in the GraphSystemThreads thread pool.",
        "group": "graph",
        "label": "Graph TP: Graph System Threads Pending",
        "mbean": "com.datastax.bdp:type=graph,name=GraphSystemThreads",
        "metric_type": "gauge",
        "path": ["Pending"],
        "scope": "general",
        "type": "jmx"
    },
    "active-graph-system-threads": {
        "aggregation_type": "counter",
        "api_key": "active-graph-system-threads",
        "is_graph_specific": false,
        "description": "Number of active tasks in the GraphSystemThreads thread pool.",
        "group": "graph",
        "label": "Graph TP: Graph System Threads Active",
        "mbean": "com.datastax.bdp:type=graph,name=GraphSystemThreads",
        "metric_type": "gauge",
        "path": ["ActiveCount"],
        "scope": "general",
        "type": "jmx"
    },
    "completed-graph-system-threads": {
        "aggregation_type": "counter",
        "api_key": "completed-graph-system-threads",
        "is_graph_specific": false,
        "description": "Number of tasks completed by the GraphSystemThreads thread pool.",
        "group": "graph",
        "label": "Graph TP: Graph System Threads Completed",
        "mbean": "com.datastax.bdp:type=graph,name=GraphSystemThreads",
        "metric_type": "gauge",
        "path": ["CompletedTaskCount"],
        "scope": "general",
        "type": "jmx"
    },
    "pending-gremlin-worker-threads": {
        "aggregation_type": "counter",
        "api_key": "pending-gremlin-worker-threads",
        "is_graph_specific": false,
        "description": "Number of pending tasks in the GremlinWorkerThreads thread pool.",
        "group": "graph",
        "label": "Graph TP: Gremlin Worker Threads Pending",
        "mbean": "com.datastax.bdp:type=graph,name=GremlinWorkerThreads",
        "metric_type": "gauge",
        "path": ["Pending"],
        "scope": "general",
        "type": "jmx"
    },
    "active-gremlin-worker-threads": {
        "aggregation_type": "counter",
        "api_key": "active-gremlin-worker-threads",
        "is_graph_specific": false,
        "description": "Number of active tasks in the GremlinWorkerThreads thread pool.",
        "group": "graph",
        "label": "Graph TP: Gremlin Worker Threads Active",
        "mbean": "com.datastax.bdp:type=graph,name=GremlinWorkerThreads",
        "metric_type": "gauge",
        "path": ["ActiveCount"],
        "scope": "general",
        "type": "jmx"
    },
    "completed-gremlin-worker-threads": {
        "aggregation_type": "counter",
        "api_key": "completed-gremlin-worker-threads",
        "is_graph_specific": false,
        "description": "Number of tasks completed by the GremlinWorkerThreads thread pool.",
        "group": "graph",
        "label": "Graph TP: Gremlin Worker Threads Completed",
        "mbean": "com.datastax.bdp:type=graph,name=GremlinWorkerThreads",
        "metric_type": "gauge",
        "path": ["CompletedTaskCount"],
        "scope": "general",
        "type": "jmx"
    },
    "solr-requests": {
        "aggregation_type": "counter",
        "alerts_label": "Search Requests",
        "allow_alerts": true,
        "api_key": "solr-requests",
        "is_table_metric": true,
        "description": "Requests per second made to a specific Solr core/index.",
        "group": "solr",
        "label": "Search: Requests",
        "mbean": "solr/{keyspace}.{table}:type=search,id=org.apache.solr.handler.component.SearchHandler",
        "other_mbeans": ["solr/{keyspace}.{table}:type=solr_query,id=com.datastax.bdp.search.solr.handler.component.CqlSearchHandler"],
        "aggregate": "add",
        "metric_type": "derive",
        "path": ["requests"],
        "postprocess": ["ensure-int"],
        "scope": "solr",
        "storage_name": "getSolrRequests",
        "type": "jmx",
        "unit": "/sec"
    },
    "solr-errors": {
        "aggregation_type": "counter",
        "alerts_label": "Search Errors",
        "allow_alerts": true,
        "api_key": "solr-errors",
        "is_table_metric": true,
        "description": "Errors per second that occur for a specific Solr core/index.",
        "group": "solr",
        "label": "Search: Errors",
        "mbean": "solr/{keyspace}.{table}:type=search,id=org.apache.solr.handler.component.SearchHandler",
        "other_mbeans": ["solr/{keyspace}.{table}:type=solr_query,id=com.datastax.bdp.search.solr.handler.component.CqlSearchHandler"],
        "aggregate": "add",
        "metric_type": "derive",
        "path": ["errors"],
        "postprocess": ["ensure-int"],
        "scope": "solr",
        "storage_name": "getSolrErrors",
        "type": "jmx",
        "unit": "/sec"
    },
    "solr-timeouts": {
        "aggregation_type": "counter",
        "alerts_label": "Search Timeouts",
        "allow_alerts": true,
        "api_key": "solr-timeouts",
        "is_table_metric": true,
        "description": "Timeouts per second on a specific Solr core/index.",
        "group": "solr",
        "label": "Search: Timeouts",
        "mbean": "solr/{keyspace}.{table}:type=search,id=org.apache.solr.handler.component.SearchHandler",
        "other_mbeans": ["solr/{keyspace}.{table}:type=solr_query,id=com.datastax.bdp.search.solr.handler.component.CqlSearchHandler"],
        "aggregate": "add",
        "metric_type": "derive",
        "path": ["timeouts"],
        "postprocess": ["ensure-int"],
        "scope": "solr",
        "storage_name": "getSolrTimeouts",
        "type": "jmx",
        "unit": "/sec"
    }
}
