<!--
 This file is managed by DataStax OpsCenter LifeCycle Manager.
 Manual edits will be overwritten by the next install or configure
 job that runs on this system.
-->
<!--
 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.
-->

<configuration scan="true">
  <jmxConfigurator />
  <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${cassandra.logdir}/system.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
      <fileNamePattern>${cassandra.logdir}/system.log.%i.zip</fileNamePattern>
      <minIndex>{{file-appender-min-index}}</minIndex>
      <maxIndex>{{file-appender-max-index}}</maxIndex>
    </rollingPolicy>

    <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
      <maxFileSize>{{file-appender-max-file-size}}MB</maxFileSize>
    </triggeringPolicy>
    <encoder>
      <pattern>%-5level [%thread] %date{ISO8601} %marker %F:%L - %msg%n</pattern>
      <!-- old-style log format
      <pattern>%5level [%thread] %date{ISO8601} %F (line %L) %msg%n</pattern>
      -->
    </encoder>
  </appender>

  <if condition='isDefined("dse.console.useColors")'>
    <then>
      <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <withJansi>true</withJansi>
        <encoder>
          <pattern>%highlight(%-5level) %green(%date{"HH:mm:ss,SSS"}) %yellow(%marker) %msg%n</pattern>
        </encoder>
      </appender>
    </then>
  </if>
  <if condition='isNull("dse.console.useColors")'>
    <then>
      <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
          <pattern>%-5level %date{"HH:mm:ss,SSS"} %marker %msg%n</pattern>
        </encoder>
      </appender>
    </then>
  </if>

  <root level="{{root-log-level}}">
    <appender-ref ref="FILE" />
    <appender-ref ref="STDOUT" />
  </root>

  <!--audit log-->
  <appender name="SLF4JAuditWriterAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${cassandra.logdir}/audit/audit.log</file>
    <encoder>
      <pattern>%-5level [%thread] %date{ISO8601} %F:%L - %msg%n</pattern>
      <immediateFlush>true</immediateFlush>
    </encoder>
    <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
      <fileNamePattern>${cassandra.logdir}/audit/audit.log.%i.zip</fileNamePattern>
      <minIndex>1</minIndex>
      <maxIndex>5</maxIndex>
    </rollingPolicy>
    <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
      <maxFileSize>200MB</maxFileSize>
    </triggeringPolicy>
  </appender>

  <logger name="SLF4JAuditWriter" level="INFO" additivity="false">
    <appender-ref ref="SLF4JAuditWriterAppender"/>
  </logger>

  <!--When running the CassandraAuditWriter asynchronously, it's possible that a failure will-->
  <!--prevent audit events from being logged. When that happens, the events are logged to this file.-->
  <appender name="DroppedAuditEventAppender" class="ch.qos.logback.core.rolling.RollingFileAppender" prudent="true">
    <file>${cassandra.logdir}/audit/dropped-events.log</file>
    <encoder>
      <pattern>%-5level [%thread] %date{ISO8601} %F:%L - %msg%n</pattern>
      <immediateFlush>true</immediateFlush>
    </encoder>
    <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
      <fileNamePattern>${cassandra.logdir}/audit/dropped-events.log.%i.zip</fileNamePattern>
      <minIndex>1</minIndex>
      <maxIndex>5</maxIndex>
    </rollingPolicy>
    <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
      <maxFileSize>200MB</maxFileSize>
    </triggeringPolicy>
  </appender>

  <logger name="DroppedAuditEventLogger" level="INFO" additivity="false">
    <appender-ref ref="DroppedAuditEventAppender"/>
  </logger>

  <!-- log for Solr validation errors -->
  <appender name="SolrValidationErrorAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <file>${cassandra.logdir}/solrvalidation.log</file>
    <rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
      <fileNamePattern>${cassandra.logdir}/solrvalidation.log.%i.zip</fileNamePattern>
      <minIndex>1</minIndex>
      <maxIndex>50</maxIndex>
    </rollingPolicy>

    <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
      <maxFileSize>20MB</maxFileSize>
    </triggeringPolicy>
    <encoder>
      <pattern>%-5level [%thread] %date{ISO8601} %marker %F:%L - %msg%n</pattern>
    </encoder>
  </appender>

  <logger name="SolrValidationErrorLogger" level="ERROR" additivity="false">
    <appender-ref ref="SolrValidationErrorAppender"/>
   </logger>

  {% comment %}
     The hardcoded loggers must precede the templated loggers so
     that customers can override the default by specifying the same
     logger again with a different level.
  {% endcomment %}
  <logger name="com.thinkaurelius.thrift" level="ERROR"/>
  <logger name="org.apache.solr.core.CassandraSolrConfig" level="WARN"/>
  <logger name="org.apache.solr.core.SolrCore" level="WARN"/>
  <logger name="org.apache.solr.core.RequestHandlers" level="WARN"/>
  <logger name="org.apache.solr.handler.component" level="WARN"/>
  <logger name="org.apache.solr.search.SolrIndexSearcher" level="WARN"/>
  <logger name="org.apache.solr.update" level="WARN"/>
  <logger name="org.apache.lucene.index" level="INFO"/>
  <logger name="com.cryptsoft" level="OFF"/>
  {% for logger in loggers %}
  <logger name="{{logger.name}}" level="{{logger.level}}"/>
  {% endfor %}

</configuration>
