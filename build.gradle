/*
 * Copyright DataStax, Inc.
 *
 * Please see the included license file for details.
 */

buildscript {
    repositories rootProject.ext.repositoryConfig
    dependencies {
        classpath 'commons-codec:commons-codec:1.11'
        classpath 'us.bpsm:edn-java:0.5.0'
        classpath 'com.cloudbees:diff4j:1.2'
    }
}

plugins {
    id 'maven-publish'
}

import org.apache.commons.codec.digest.DigestUtils
import org.apache.commons.codec.binary.Hex

description = "OpsCenter definitions"

task tar(type:Tar) {
    archiveName = "definition_files.tgz"
    compression = Compression.GZIP
    destinationDir buildDir
    into ('/'){
        from 'resources'
        exclude 'build'
    }
}

defaultPropertyValue('publishingUrl', 'http://repo.sjc.dsinternal.org/artifactory/datastax-releases-local')
defaultPropertyValue('publishRepositoryUsername', rootProject.hasProperty('datastaxRepositoryUsername') ? datastaxRepositoryUsername : null)
defaultPropertyValue('publishRepositoryPassword', rootProject.hasProperty('datastaxRepositoryPassword') ? datastaxRepositoryPassword : null)

publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'com.datastax.opscenter'
            artifactId = project.name
            version = project.version.replace('SNAPSHOT', "-${gitCurrentHeadId().substring(0,7)}")

            artifact tar
            pom {
                licenses {
                    license {
                        name = 'DataStax Proprietary License'
                        url = 'http://www.datastax.com/enterprise-terms'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url = publishingUrl
            if (publishRepositoryUsername != null && publishRepositoryPassword != null) {
               credentials {
                   username publishRepositoryUsername
                   password publishRepositoryPassword
               }
            }
        }
    }
}

tasks.withType(PublishToMavenRepository) {
    doFirst {
        logger.lifecycle("Publish ${publication.groupId}:${publication.artifactId}:${publication.version} to $repository.url")
    }
}

task md5hash(dependsOn: tar) {
    ext {
        md5File = file("${buildDir}/version.md5")
    }

    inputs.files "${buildDir}/definition_files.tgz"
    outputs.file md5File
    doLast {
        def digest = DigestUtils.md5Digest
        inputs.files.sort().each {
            it.withInputStream { is ->
                DigestUtils.updateDigest(digest, is)
            }
        }
        md5File.withWriter { it << Hex.encodeHexString(digest.digest()) }
    }
}

task dist(dependsOn: md5hash) {
}

